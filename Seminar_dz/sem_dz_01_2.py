import unittest


''' –ó–∞–¥–∞–Ω–∏–µ_1
üìå –í–æ–∑—å–º–∏—Ç–µ 1-3 –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–µ—Ö, —á—Ç–æ –±—ã–ª–∏ –Ω–∞ –ø—Ä–æ—à–ª—ã—Ö —Å–µ–º–∏–Ω–∞—Ä–∞—Ö –∏–ª–∏ –≤ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö.
üìå –ù–∞–ø–∏—à–∏—Ç–µ –∫ –Ω–∏–º —Ç–µ—Å—Ç—ã.
üìå 2-5 —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –∑–∞–¥–∞—á—É –≤ —Ç—Ä—ë—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö:
    ‚óã doctest,
    ‚óã unittest,
    ‚óã pytest. 
'''

# –ó–∞–¥–∞—á–∞ —Å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–º (—Ç–µ—Å—Ç unittest)

class FactorialGenerator:
    def __init__(self, start=1, stop=None, step=1):
        self.start = start
        self.stop = stop if stop is not None else start
        self.step = step

    def factorial(self, n):
        if n == 0 or n == 1:
            return 1
        else:
            return n * self.factorial(n - 1)

    def generate_factorials(self):
        current = self.start
        while current <= self.stop:
            yield self.factorial(current)
            current += self.step


class TestFactorialGenerator(unittest.TestCase):
    def test_generate_factorials_01(self):
        generator = FactorialGenerator(1, 5)
        self.assertEqual(list(generator.generate_factorials()), [1, 2, 6, 24, 120])

    def test_generate_factorials_02(self):
        generator = FactorialGenerator(2, 10, 2)
        self.assertEqual(list(generator.generate_factorials()), [2, 24, 720, 40320, 3628800])

    def test_generate_factorials_03(self):
        generator = FactorialGenerator(5)
        self.assertEqual(list(generator.generate_factorials()), [120])


if __name__ == "__main__":
    unittest.main(verbosity=2)
